@n
@* UTILITIES. The utility functions 

@
@I matrix.web

@*1 pack. Store the six electron repulsion labels.

@a

      subroutine pack(a, i, j, k, l, m, n)
      double precision a
      integer i, j, k, l, m, n

      double precision word
      integer id(6)
      character*1 chr1(8), chr2(24)
      equivalence (word, chr1(1)), (id(1), chr2(1))

      id(1) = i; id(2) = j; id(3) = k
      id(4) = l; id(5) = m; id(6) = n
    
      do ii = 1, 6
         chr1(ii) = chr2((ii-1)*BYTES_PER_INTEGER + LEAST_BYTE)
      end do
      a = word
      return
      end
@

@*1 unpack. Regenerate the 6 electron repulsion labels.

@a

      subroutine unpack(a, i, j, k, l, m, n)
      double precision a
      integer i, j, k, l, m, n

      double precision word
      integer id(6)
      character*1 chr1(8), chr2(24)
      equivalence (word, chr1(1)), (id(1), chr2(1))

      do ii = 1, 6
         chr2((ii-1)*BYTES_PER_INTEGER + LEAST_BYTE) = chr1(ii)
      end do

      id(1) = i; id(2) = j; id(3) = k
      id(4) = l; id(5) = m; id(6) = n
    
      return
      end

@

@*1 next\_label. Generate the next label of electron repulsion integral.

A function to generate  the
four standard loops which are used to generate (or, more rarely) process
the electron repulsion integrals. 

The sets of integer values are generated in the usual
standard order in canonical form, that is, equivalent to the set of loops: \\
 |
   do i = 1,n;
      {
      do j = 1,i;
         {
         do k = 1,i;
            {
            ltop = k;
            if ( i == k ) ltop = j ;
            do l = 1,ltop;
               {
               do something with i j k l
               }
            }
         }
      }
 |
\ \\
Note that, just as is the case with the |do|-loops,
the whole process must be {\em initialised\/} by
setting initial values of |i|, |j|, |k| and |l|. 
If the whole set of labels is required then \\
|i=1|, |j=1|, |k=1|, |l|=0 \\
is appropriate.

Usage is, typically, \\
| i = 0; j = 0; k = 0; l = 0; | \\
|while(next_label(i,j,k,l,n) == YES)| \\
| {  | \\
  do something with i j k and l \\
|  } | \\

@a

      integer function next_label(i,j,k,l,n)
      integer i, j, k, l, n
C
      integer ltop
      
      next_label = YES
      ltop = k
      if (i.EQ.k) ltop = j

      if (l.LT.ltop) then
         l = l + 1
      else
         l = 1
         if (k.LT.i) then
             k = k + 1
         else
            k = 1
            if (j.LT.i) then
                j = j + 1
            else
               j = 1
               if (i.LT.n) then
                   i = i + 1
               else
                  next_label = NO
               end if
            end if
         end if
      end if
      return 
      end

@

@*1 shalf. This subroutine calculates ${\bf S}^{-\frac{1}{2}}$ matrix 
from ${\bf S}$ matrix. 

@a

      subroutine shalf (S, U, W, m)
      implicit double precision (a-h,o-z)
      double precision S(*), U(*), W(*)
      integer m

      data crit, one/1.0D-10,1.0D+00/
      call eigen(S,U,m)
      /* Transpose the eigenvalues of S for convenience */
      do i = 1, m
         do j =1 , i
            ij=m*(j-1)+i ; ji=m*(i-1)+j ; d=U(ij)
            U(ij) = U(ji) ; U(ji) = d
         end do
      end do
      /* Get the inverse root of the eigenvalues */
      do i = 1, m
         ii = (i-1)*m+i
         if (S(ii).LT.crit) then
             write(ERROR_OUTPUT_UNIT, 200)
             STOP
         end if
         S(ii) = one/dsqrt(S(ii))
      end do
      call gtprd(U, S, W, m, m, m)
      call gmprd(W, U, S, m, m, m)
C
      return
 200  format(" Basis is linearly deoendent; S is singular! ")
      end

@


@*1 spinor.

@a

      subroutine spinor(H,m)
      double precision H(*)
      integer m

      double precision zero
      integer i, j, ij, ji, ip, jp, ijp, ijd, nl, n
      data zero/0.0D+00/

      n = 2*m; nl = m+1
      
      do i = 1, m
         do j = 1, m
            ij=m*(j-1)+i;  ip=i+m;  jp=j+m
            ijp=n*(jp-1)+ip;  H(ijp) = H(ij)
         end do
      end do

      do i = 1, m
         do j = 1, m
            ip = i+m; jp = j+m; ijp=n*(jp-1)+ip
            ijd=n*(j-1)+i; H(ijd) = H(ijp)
         end do
      end do
 
      do i = 1, m
         do j = nl, n
            ij = n*(j-1)+i; ji = n*(i-1)+j
            H(ij) = zero
            H(ji) = zero
         end do
      end do

      return
      end

@
