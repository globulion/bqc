@z Routine to call the integral generation system
    December 1996
@x
@r

@* genint. Routine to evaluate S,  T,V i.e. H
           and a two-electron integral file

@I defs.hweb

@a 
   subroutine genint (ngmx,nbfns,eta,ntype,ncntr,nfirst,
                     nlast,vlist,ncmx,noc,S,H,nfile,ifPSE);
   double precision S(*),H(*);
   integer pointer, last, ifPSE;
   double precision eta(ngmx,5),vlist(ncmx,4);
   integer ntype(*),nfirst(*),nlast(*),ncntr(*),nfile;
   {
   double precision val,crit,ovltot,kintot;
   double precision generi,genoei;
   integer i,j,k,l,ltop,ij,ji,mu;
   integer nr(NO_OF_TYPES,3);
      data  nr / 0,1,0,0,2,0,0,1,1,0,3,0,0,2,2,1,0,1,0,1,
                 0,0,1,0,0,2,0,1,0,1,0,3,0,1,0,2,2,0,1,1,
                 0,0,0,1,0,0,2,0,1,1,0,0,3,0,1,0,1,2,2,1/;
      data crit/1.0d-08/;

   mu = 0; /*  tag  for use later perhaps, when integrals are
              marked for special purposes */
 

/*    One-electron integrals */

    do i = 1, nbfns;
      {
        do j = 1, i;
           { 
           ij = (j-1)*nbfns+i;@+  ji = (i-1)*nbfns+j;
           if (ifPSE == NO)
             H(ij) = genoei (i,j,eta,ngmx,nfirst,nlast,ntype,
                              nr,NO_OF_TYPES,vlist,noc,ncmx,ovltot,kintot);
/*           else
             H(ij) = genpse (i,j,eta,ngmx,nfirst,nlast,ntype,
                              nr,NO_OF_TYPES,vlist,noc,ncmx,ovltot,kintot);
*/
            H(ji) = H(ij);
            S(ij) = ovltot;@+ S(ji) = ovltot;
           }
      }

/* H now contains T + V */
 
   rewind nfile;@+  pointer = 0; @+ last = NO;  /* initialisation for putint */

   do i = 1, nbfns;

      { 

      do j = 1, i;

         { 

         do k = 1, i;

            { 

            ltop = k; 
              if ( i == k ) ltop = j;  /* get upper limit for |l| right! */
              do l = 1, ltop;

                { 

                if ( l == nbfns ) last = YES; /*   last integral */
                  val = generi (i,j,k,l,0,eta,ngmx,nfirst,nlast,
                                ntype,nr,NO_OF_TYPES);
                  if(dabs(val) < crit ) next;  /* this assumes that the
                                                last integral is never zero */
                  call putint(nfile,i,j,k,l,mu,val,pointer,last);

                 }

             }

          }

      }

   return;
   }




