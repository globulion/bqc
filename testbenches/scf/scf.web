@n 

@* SCF. 

This is  Version 1 of the Hartree-Fock theory implemented
for closed shells (RHF) and open shells (UHF-DODS) calculations.

\ \\ \ \\
\begin{minipage}{4.5in}
\ \\
\begin{description}
\item[NAME] \    SCF     \\
 Perform LCAO-MO-SCF calculation on a molecule.

\item[SYNOPSIS] \     \\
 {\tt double precision function scf(H, C, nbasis, nelec, nfile, \\
                              irite, damp, interp, E, HF, V, R, Rold, Ubar, eps, crit)
   \ \\
  integer nbasis, nelec, nfile, irite \\
  double precision damp, E \\
  double precision H(ARB), C(ARB), HF(ARB), V(ARB), R(ARB) \\
  double precision Rold(ARB), Ubar(ARB), eps(ARB) \\
 }

\item[DESCRIPTION] \  \\
 Perform LCAO-MO calculation of either closed-shell RHF type or more general
open-shell (real) UHF-DODS type. The method is traditional Roothan repeated
diagonalizations of Hartree-Fock matrix until self-consistency is reached:
\[
   {\bf F} \cdot {\bf C} = {\bf S} \cdot {\bf C} \cdot {\boldmath \epsilon}
\]

\item[ARGUMENTS] \    \\
\begin{description}
\item[H] Input: One-electron Hamiltonian of size ({\tt nbasis x nbasis}), i.e.,
                matrix elements of one-electron operator
\item[C] Input/Output: An initial MO matrix - it must at least
                orthigonalize the basis. Normally, it is simply the orthogonalization
                matrix ${\bf S}^{-\frac{1}{2}}$. On output the SCF {\bf C} matrix
                is placed here.
\item[nbasis] Input: the number of \emph{spatial} orbitals in the basis (i.e., half
                of the number of the spin-basis set functions if {\tt nelec} $\ge 0$)
\item[nelec]  Input: The number of electrons in the system. 
\item[nfile]  The electron-repulsion file unit.
\item[itite]  Channel number for convergence information or zero if this information
              is not necessary.
\item[damp]   Hartree-Fock damping parameter.
\item[interp] Interpolation parameter. If 0 no interpolation will be undertaken.
\item[HF]     Output: for use as the Fock matrix
\item[V]      Workspace: 
\item[R]      Output: Density matrix
\item[Rold]   Workspace:
\item[Ubar]   Workspace:
\item[eps]    Output: orbital energies (first {\tt nelec} are the occupied orbitals)
\item[E]      Output: Total HF electronic energy
\item[crit]   Convergence of the SCF procedure
\end{description}

\item[RETURNS] \    \\
%\begin{description}
   {\tt YES} if the calculation is converged in {\tt MAX\_SCF\_ITERATIONS} \\
   {\tt NO } if no convergence is met. Typical usage:
   {\tt if ( SCF(......) .EQ. YES ) then \\
               output succesful calculation
   }
%\end{description}

\item[SEE ALSO] \    \\
%\begin{description}
 {\tt scfR, scfGR, eigen} 
%\end{description}

\item[DIAGNOSTICS] \  \\
Happy!
\end{description}
\ \\ \ \\
\end{minipage}
\ \\ \ \\

@m MAX_ITERATIONS 50

@a

      integer function SCF(H,C,nbasis,nelec,nfile,irite,damp,interp,E,HF,V,R,
     &                     Rold,Cbar,epsilon,crit)

      @< Global SCF Declarations @>

      @< Internal SCF Declarations @>

      @< Select SCF Type @>

      @< Set initial matrices and counters @>

      do while ((icon.NE.0).AND.(kount.LT.MAX_ITERATIONS)) 
  
         @< Sigle SCF iteration @>

      end do

      @< Write the output result @> 

      @< Formats @>

      return
      end

@

@< Global SCF Declarations @>=
      implicit double precision (a-h,o-z)
      integer nbasis, nelec, nfile, irite
      integer interp
      double precision H(ARB), C(ARB), HF(ARB), V(ARB), R(ARB)
      double precision Rold(ARB), Cbar(ARB)
      double precision epsilon(ARB)
      double precision E, damp, crit
@

@< Internal SCF Declarations @>=
      integer scftype, kount, maxit, nocc, m, mm, i
      double precision term, turm, Rsum
      double precision zero, half
      data zero,half/0.0D+00,0.5D+00/
@

@< Select SCF Type @>=
      if (nelec.GT.zero) then /* closed shell case */ 
          scftype = CLOSED_SHELL_CALCULATION
          nocc    = abs(nelec/2)
          m       = nbasis
      else                /* open shell case */
          scftype = UHF_CALCULATION
          nocc    = nelec
          m       = nbasis * 2
          call spinor(H, nbasis)
          call spinor(C, nbasis)
      end if
@

@< Set initial matrices and counters @>=
      /* basis set size */            
      m = m*m
      do i = 1, mm
         R(i) = zero; Rold(i) = zero
      end do
      SCF    = YES
      kount = 0
      icon = 100
@   

@< Sigle SCF iteration @>=
      kount = kount + 1
      E = zero; icon = 0
      do i = 1, mm
         HF(i) = H(i)
         E = E + R(i)*HF(i)
      enddo
      call scfGR(R, HF, m, nfile)
      do i = 1, mm
         E = E + R(i)*HF(i)
      enddo
      
      if (scftype.EQ.UHF_CALCULATION) E = half*E
                                                        
      write(ERROR_OUTPUT_UNIT, 200) E
                                                        
      call gtprd(C, HF, R, m, m, m)
      call gmprd(R, C, HF, m, m, m)
      call eigen(HF, Cbar, m)
      do i = 1, m
         epsilon(i) = HF(m*(i-1)+i)
      enddo
      call gmprd(C, Cbar, V, m, m, m)
      call scfR(V, R, m, nocc)
      Rsum = zero
      do i = 1, mm
         turm = R(i) - Rold(i)
         term = dabs(turm)
         Rold(i) = R(i)
         C(i) = V(i)
         if (term.GT.crit) icon = icon + 1
         Rsum = Rsum + term
         if (kount.LT.interp) R(i) = R(i) - damp*turm
      enddo

@

@< Write the output result @>=
      write(ERROR_OUTPUT_UNIT, 201) Rsum, icon

      if ((kount.EQ.MAX_ITERATIONS).AND.(icon.NE.0)) then
          write(ERROR_OUTPUT_UNIT, 204)
      else
         write(ERROR_OUTPUT_UNIT, 202) kount
         write(ERROR_OUTPUT_UNIT, 203) (epsilon(i), i=1, nocc)
      endif
@

@< Formats @>=
 200  format(" Current Electronic Energy = ", f12.6)
 201  format(" Convergence in R = ", f12.5,i6, "  Changing")
 202  format(" SCF converged in", i4, " iterations")
 203  format(" Orbital Energies ", (7f10.5))
 204  format(" SCF did not converged... quitting")
@

@*1 scfGR. 

@m  locGR(i,j) (m*(j-1) + i)
@a
      subroutine scfGR(R, G, m, nfile)
      double precision R(*), G(*)
      integer m, nfile
C
      integer mby2
      double precision val
      integer i, j, k, l, is, js, ks, ls, ijs, kls, mu
      integer getint
      double precision zero, one, a, b
      integer pointer, spin, skip
      data one,zero/1.0D+00,0.0D+00/
C
      mby2 = m/2
c      rewind nfile
      pointer = 0

      do while (getint(nfile, is, js, ks, ls, mu, val, pointer).NE.
     &                                              END_OF_FILE)

         ijs = is*(is-1)/2+js 
         kls = ks*(ks-1)/2+ls

         do spin = 1, 4
            skip = NO

            select case (spin)                                
                case (1) 
                  i=is
                  j=js
                  k=ks
                  l=ls
                case (2)
                  i=is+mby2
                  j=js+mby2
                  k=ks+mby2
                  l=ls+mby2
                case (3)
                  i=is+mby2
                  j=js+mby2
                  k=ks
                  l=ls
                case (4)
                  if (ijs.EQ.kls) skip = YES
                  i=is
                  j=js
                  k=ks+mby2
                  l=ls+mby2
                  call order(i,j,k,l)
            end select
 
            if (skip.EQ.YES) cycle

            a = one; b = one
            if (spin.GE.3) b = zero
            
            call GofR(R,G,m,a,b,i,j,k,l,val)
         end do
      enddo
      /* symmetrize G matrix */
      do i = 1, m
         do j = 1, i-1
            ij = locGR(i,j); ji = locGR(j,i)
            G(ji) = G(ij)
         end do
      end do

      return
      end

@

@*2 GofR.

@a
      subroutine GofR(R,G,m,a,b,i,j,k,l,val)
      double precision R(*), G(*)
      double precision val, a, b
      integer i, j, k, l, m
      integer ij, kl, il, ik, jk, jl
      double precision coul1, coul2, coul3, exch

      ij = locGR(i,j); kl = locGR(k,l)
      il = locGR(i,l); ik = locGR(i,k)
      jk = locGR(j,k); jl = locGR(j,l)
      if (j.LT.k) jk = locGR(k,j)
      if (j.LT.l) jl = locGR(l,j)

      coul1 = a*R(ij)*val; coul2 = a*R(kl)*val; exch = b*val

      if (k.NE.l) then
          coul2 = coul2 + coul2
          G(ik) = G(ik) - R(jl)*exch
          if ((i.NE.j).AND.(j.GE.k)) G(jk) = G(jk) - R(il)*exch
      end if
      
      G(il) = G(il) - R(jk)*exch; G(ij) = G(ij) + coul2

      if ((i.NE.j).AND.(j.GE.l)) G(jl) = G(jl) - R(ik)*exch
      
      if (ij.NE.kl) then
          coul3 = coul1
          if (i.NE.j) coul3 = coul3 + coul1
          if (j.LE.k) then
              G(jk) = G(jk) - R(il)*exch
              if ((i.NE.j).AND.(i.LE.k)) G(ik) = G(ik) - R(jl)*exch
              if ((k.NE.l).AND.(j.LE.l)) G(jl) = G(jl) - R(ik)*exch
          end if
          G(kl) = G(kl) + coul3
      end if

      return 
      end
@

@*2 order. 

@a
      subroutine order(i,j,k,l)
      integer i, j, k, l
      integer integ

      i = abs(i); j = abs(j); k = abs(k); l = abs(l)

      if (i.LT.j) then
          integ = i
          i = j
          j = integ
      end if
      
      if (k.LT.l) then
          integ = k
          k = l
          l = integ
      end if

      if ((i.LT.k).OR.((i.EQ.k).AND.(j.LT.l))) then
           integ = i
           i = k
           k = integ
           integ = j
           j = l
           l = integ
      end if

      return
      end
@

@*1 scfR. 

@a
      subroutine scfR (C, R, m, nocc)
      double precision C(ARB), R(ARB)
      integer m, nocc
C
      double precision suma, zero
      integer i, j, k, ij, ji, kk, ik, jk
      data zero/0.0D+00/
C
      do i = 1, m
         do j = 1, i
            suma = zero
            do k = 1, nocc
               kk = m*(k-1)
               ik = kk + i
               jk = kk + j
               suma = suma + C(ik)*C(jk)
            enddo
            ij = m*(j-1) + i
            ji = m*(i-1) + j
            R(ij) = suma
            R(ji) = suma
         enddo
      enddo
C
      return
      end
@
