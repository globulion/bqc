\def\title{---PSEUDOPOTENTIAL INTEGRALS---}

@r

@* GENPSE. Function to compute the one-electron integrals (overlap,
kinetic energy and nuclear attraction plus pseudo-potential).
The STRUCTURES and GENERI manual pages must be
consulted for a detailed description of the calling sequence.

The overlap and kinetic energy integrals are expressed in terms of
a basic one-dimensional Cartesian overlap component computed by
|function ovrlap| while the more involved nuclear-attraction
integrals are computed as a sum of geometrical factors computed by
|subroutine aform| and the standard $F_\nu$ computed by |function fmch|.
The pseudopotential integrals are computed by the method of Komar.

@I defs.hweb

@a

   double precision  function genpse(i,j,eta,ngmx,nfirst,
         nlast,ntype,nr,ntmx,vlist,noc,ncmx,ovltot,kintot);
   implicit double precision (a-h,o-z);
   integer i, j, ngmx, ncmx, noc, ntmx;
   integer nfirst(*),nlast(*),ntype(*), nr(ntmx,3);
   double precision ovltot, kintot;
   double precision eta(ngmx,5), vlist(ncmx,4);

   {

   double precision Airu(10),Ajsv(10),Aktw(10);
   double precision p(3),sf(10,3),tf(20), ca(3), ba(3);
   double precision fact(20),g(50);
   double precision kin, tnai, totnai, tpse, totpse;
   integer bigZ;

   data zero,one,two,half,quart /0.0d00,1.0d00,2.0d00,0.5d00,0.25d00/;
   data pi/3.141592653589d00/;

   @<Factorials@>
   @<One-electron Integer Setup@>   
         /* Obtain the powers of x,y,z and summation limits */

 
   rAB = (eta(iss,1)-eta(jss,1))**2 + (eta(iss,2)-eta(jss,2))**2 
            + (eta(iss,3)-eta(jss,3))**2 ;
/* Initialise all accumulators   */

   genoei = zero; totpse = zero; 
   totnai = zero;@~ kintot = zero;@~ ovltot = zero;

   for ( irun = iss; irun <= il; irun = irun+1)  /* start of "i" contraction */

      {

      for ( jrun = jss; jrun <= jl; jrun = jrun+1)   /* start of "j" contraction */

         {

         @<Compute PA @>  /* Use the Gaussian-product theorem to find $\vec{P}$ */

         @<Overlap Components@>

         ovltot = ovltot + anorm*bnorm*ovl;  /* accumulate Overlap */

         @<Kinetic Energy Components@>

         kintot = kintot + anorm*bnorm*kin;  /*  accumulate  Kinetic energy  */

/*  now the nuclear attraction integral   */
   tpse = zero; tnai = zero; 

   @<Form fj@>  /* Generate the required $f_j$ coefficients */


   for ( n = 1; n <= noc; n = n+1)       /*  loop over nuclei */

      {

      bigZ = vlist(n,4) + 0.001d00;      /* round to integer  */
/* Do pseudo potential first - remember vlist(n,4)  is bigZ */
      do kpse = 1, 3;

         {

         ca(kpse) = eta(irun,kpse) - vlist(n,kpse);  /* relative  positions */
         ba(kpse) = eta(jrun,kpse) - vlist(n,kpse);

         }

      pse = Vps(l1,m1,n1,aexp,ca,l2,m2,n2,bexp,ba,bigZ);

/*        bigZ is changed to Zeff in Vps */

      tpse = tpse + pse;   /* pseudo potential added in - now for
                           $ Z_{eff}/r$ nuclear attraction term */
      pn = zero;  /* Initialise current contribution  */

/* Get the attracting-nucleus information;  co-ordinates */

      @<Nuclear data@>

      t = t1*pcsq;

      call auxg(m,t,g);   /* Generate all the $F_\nu$ required */

     @<Form As@>   /* Generate the geometrical $A$-factors */

/* Now sum the products of the geometrical $A$-factors and the $F_\nu$ */

      for ( ii = 1; ii <= imax; ii = ii+1)

         {

         for ( jj = 1; jj <= jmax; jj = jj+1)

            {

            for ( kk = 1; kk <= kmax; kk = kk+1)

               {

               nu = ii + jj + kk - 2;
               pn = pn + Airu(ii)*Ajsv(jj)*Aktw(kk)*g(nu);

               }

            }

         }

      tnai = tnai -pn*float(bigZ);  /* Add to total multiplied by current charge */

      }    /*  end of loop over nuclei  */

      totnai = totnai + prefa*tnai;
      totpse = totpse + anorm*bnorm*tpse;

      }       /*  end of "j" contraction  */

   }          /* end of "i" contraction  */

   genpse = totnai + totpse + kintot;  /* "T + V + Vpse" */

/*    write(6,200) i,j,ovltot,kintot,totnai,totpse,genpse;
 200 format(2i3,5f12.5);   */

   return;

   }


@ These numbers are the first 20 factorials |fact(i)| contains $(i-1)!$.
 
@<Factorials@> =
data fact/1.0,1.0,2.0,6.0,24.0,120.0,
720.0,5040.0,40320.0,362880.0,3628800.0,
39916800.0,479001600.0,6227020800.0,6*0.0/;


@  Get the various powers of $x$, $y$ and $z$ required from the data
structures and obtain the contraction limits etc. 


@<One-electron Integer Setup@>=
   ityp=ntype(i);@~ jtyp = ntype(j);
   l1 = nr(ityp,1);@~ m1 = nr(ityp,2);@~ n1 = nr(ityp,3);
   l2 = nr(jtyp,1);@~ m2 = nr(jtyp,2);@~ n2 = nr(jtyp,3);
   imax = l1+l2+1;@~ jmax = m1+m2+1;@~ kmax = n1+n2+1;
   maxall = imax;
   if ( maxall < jmax ) maxall = jmax;
   if ( maxall < kmax ) maxall = kmax;
   if ( maxall < 2 )  maxall = 2;  /* when all functions are "s" type */
   iss = nfirst(i);@~ il = nlast(i);
   jss = nfirst(j);@~ jl = nlast(j);

@ Use the Gaussian Product Theorem to find the position vector
$\vec{P}$, of the product of the two Gaussian exponential factors
of the basis functions for electron 1.

@<Compute PA@>=
      aexp = eta(irun,4);@+ anorm = eta(irun,5);
         bexp = eta(jrun,4);@+ bnorm = eta(jrun,5);
         t1 = aexp + bexp;@+ deleft = one/t1;
         p(1) = (aexp*eta(irun,1)+bexp*eta(jrun,1))*deleft;
         p(2) = (aexp*eta(irun,2)+bexp*eta(jrun,2))*deleft;
         p(3) = (aexp*eta(irun,3)+bexp*eta(jrun,3))*deleft;
         pax = p(1) - eta(irun,1);@+   pay = p(2) - eta(irun,2);
         paz = p(3) - eta(irun,3);
         pbx = p(1) - eta(jrun,1);@+   pby = p(2) - eta(jrun,2);
         pbz = p(3) - eta(jrun,3);
         prefa = exp(-aexp*bexp*rAB/t1)*pi*anorm*bnorm/t1;


@  This simple code gets the Cartesian overlap components and
assembles the total integral. It also computes the overlaps required
to calculate the kinetic energy integral used in a later module.

@ 

@<Overlap Components@>=
         prefa = two*prefa;
         expab = exp(-aexp*bexp*rAB/t1);
         s00=(pi/t1)**1.5*expab;
         dum = one;@~ tf(1) = one;del = half/t1;
         for ( n = 2; n <= maxall; n = n+1)

            {   tf(n) = tf(n-1)*dum*del;@~ dum = dum + two;@~ }

         ox0 = ovrlap(l1,l2,pax,pbx,tf);
         oy0 = ovrlap(m1,m2,pay,pby,tf);
         oz0 = ovrlap(n1,n2,paz,pbz,tf);
         ox2 = ovrlap(l1,l2+2,pax,pbx,tf);
         oxm2 = ovrlap(l1,l2-2,pax,pbx,tf);
         oy2 = ovrlap(m1,m2+2,pay,pby,tf);
         oym2 = ovrlap(m1,m2-2,pay,pby,tf);
         oz2 = ovrlap(n1,n2+2,paz,pbz,tf);
         ozm2 = ovrlap(n1,n2-2,paz,pbz,tf);
         ov0 = ox0*oy0*oz0;@+  ovl = ov0*s00;
         ov1 = ox2*oy0*oz0;@+ ov4 = oxm2*oy0*oz0;
         ov2 = ox0*oy2*oz0;@+ ov5 = ox0*oym2*oz0;
         ov3 = ox0*oy0*oz2;@+ ov6 = ox0*oy0*ozm2;



@  Use the previously-computed overlap components to 
generate the Kinetic energy components and
hence the total integral. 



@<Kinetic Energy Components@>=
         xl=dfloat(l2*(l2-1));@~   xm=dfloat(m2*(m2-1));
         xn=dfloat(n2*(n2-1));@~   xj=dfloat(2*(l2+m2+n2)+3);
         kin=s00*(bexp*(xj*ov0-two*bexp*(ov1+ov2+ov3))-
                half*(xl*ov4+xm*ov5 +xn*ov6));

@  Form the $f_j$ coefficients needed for the nuclear attraction integral. */


@<Form fj@>=
   m = imax + jmax + kmax -2; 
   for ( n = 1; n <= imax; n = n+1)
      sf(n,1) = fj(l1,l2,n-1,pax,pbx);
   for ( n = 1; n <= jmax; n = n+1)
      sf(n,2) = fj(m1,m2,n-1,pay,pby);
   for ( n = 1; n <= kmax; n = n+1)
      sf(n,3) = fj(n1,n2,n-1,paz,pbz);


@  Use |aform| to compute the required $A$-factors for each
Cartesian component. 

@ 

@<Form As@>=
   epsi = quart/t1;
      for ( ii = 1; ii <= 10; ii = ii+1)

         { Airu(ii) = zero;@~ Ajsv(ii) = zero;@~ Aktw(ii) = zero; }

      call aform(imax,sf,fact,cpx,epsi,Airu,1);  /* form $A_{i,r,u}$  */
      call aform(jmax,sf,fact,cpy,epsi,Ajsv,2);   /* form $A_{j,s,v}$  */
      call aform(kmax,sf,fact,cpz,epsi,Aktw,3);   /* form $A_{k,t,w}$  */



@  Get the co-ordinates of the attracting nucleus with respect to $\vec{P}$. 


@<Nuclear data@>=
      cpx = p(1) - vlist(n,1);@~ cpy = p(2) - vlist(n,2);
      cpz = p(3) - vlist(n,3);@~ pcsq = cpx*cpx + cpy*cpy + cpz*cpz;

@* VPS. Function to organise the computation of the pseudo-potential
integral for a particular choice of potential. This function has the duty
of identifying the nature of the centre on which the source of
effective potential is based (from |bigZ|) and getting the parameters
for this atom from the arrays containing that information for many atoms.
When this is done |Vps| calls |psepot| to do the actual integral
evaluation.

@a

   double precision function Vps(l1,m1,n1,alpha,ca,
                                 l2,m2,n2,beta,ba, bigZ);
   implicit double precision (a-h,o-z);
   integer l1, l2, m1, m2, n1, n2, bigZ;
   double precision alpha, beta, ca(*), ba(*)
   {
/*  Pseudopotential arrays  */
   integer nupse(NU_DIM);
   integer nc(3), nb(3);
   integer kpsemx, lpsemx;   /* Current atom expansion maxima */
   integer idparm, inparm;   /* Position of PS parameters */
   integer doff, noff;       /* Offsets in PS arrays  */
   double precision dpse(DPSE_DIM), dzu(NU_DIM);
   double precision pse;
   double precision fourpi;
   double precision psepot; /*  Pseudopotential function */

   data fourpi/12.56637061d00/, zero/0.0d00/;   
/* <PSE Data> has the parameters for the Pseudopotentials
 in the form of "data" statements for dpse, nupse, dzu */

   @<PSE Data@>

   nc(1) = l1;@~ nc(2) = m1;@~ nc(3) = n1;
   nb(1) = l2;@~ nb(2) = m2;@~ nb(3) = n2;
      doff = 1;                /* 1st. Row parameters at start of dpse
                                coefficient array  */
      noff = 1;              /* and at start of exponent and power arrays */

/*   Size of expansions for 1st.Row */

      kpsemx = FIRST_ROW_KMAX;
      lpsemx = FIRST_ROW_LMAX;
      if ( (NEON < bigZ) && (bigZ <= ARGON) )

         {

/* offsets for 2nd. row parameters  */

         doff = NUMBER_OF_FIRST_ROW * FIRST_ROW_KMAX *( FIRST_ROW_LMAX +1)+ 1;
         noff = NUMBER_OF_FIRST_ROW * FIRST_ROW_KMAX + 1; 

/*   Size of expansions for 2nd. Row */

         kpsemx = SECOND_ROW_KMAX;
         lpsemx = SECOND_ROW_LMAX;

         }

      if ( (ARGON < bigZ) && (bigZ <= ZINC) )

         {

/* offsets for 3rd. Row parameters including First Transition Series */

         doff = NUMBER_OF_FIRST_ROW * FIRST_ROW_KMAX *( FIRST_ROW_LMAX +1)+ 
                NUMBER_OF_SECOND_ROW * SECOND_ROW_KMAX *( SECOND_ROW_LMAX +1)+1;

         noff = NUMBER_OF_FIRST_ROW * FIRST_ROW_KMAX 
                + NUMBER_OF_SECOND_ROW * SECOND_ROW_KMAX + 1; 

/*   Size of expansions for 3rd. Row */

         kpsemx = THIRD_ROW_KMAX;
         lpsemx = THIRD_ROW_LMAX;

         }

      pse = zero;   /* Initialise the integral */

      if ( bigZ <= HELIUM )    /* no potentials for H, He */
         return(pse);

      if ( (HELIUM < bigZ) && (bigZ <= NEON) )

         bigZ = bigZ - HELIUM;

      if ( (NEON < bigZ) && (bigZ <= ARGON) )

         bigZ = bigZ - NEON;

      if ( (ARGON < bigZ) && (bigZ <= ZINC) )

         bigZ = bigZ - ARGON;
      if ( bigZ > ZINC )

         { write(ERROR_OUTPUT_UNIT,200);@+ STOP;}

           200 format (" No Pseudo potential for this atom")

      idparm = (bigZ-1)*kpsemx*(lpsemx+1) + doff;
      inparm = (bigZ-1)*kpsemx + noff;
      pse = psepot(nc, alpha, ca, nb, beta, ba,
                dzu(inparm), dpse(idparm), nupse(inparm), kpsemx,lpsemx);
      pse = pse*fourpi;
   return(pse);

   }


/* The (long and tedious) data structure containing the parameters
for the effective potentials for the atoms included in the set. */

@ 

@<PSE Data@>=
@#define LDIM1P1 $EVAL(LDIM1+1)
@#define LDIM1PLDIM2 $EVAL(LDIM1+LDIM2)
@#define LDIM1PLDIM2P1 $EVAL(LDIM1PLDIM2+1)
   data (dpse(i), i = 1,LDIM1) / 
   3.48672d00, 0.49988d00, 0.0d00, 0.0d00, 0.0d00, -0.77469d00,  /* Li */
   0.99509d00, -0.02612d00, 0.0d00, 0.0d00, 0.0d00, -0.27010d00, /* Be */
   1.04649d00, -0.07501d00, 0.0d00, 0.0d00, 0.0d00, -0.36886d00, /* B */
   1.07785d00, -0.17140d00, 0.0d00, 0.0d00, 0.0d00, -0.40843d00, /* C */
   1.09851d00, -0.33854d00, 0.0d00, 0.0d00, 0.0d00, -0.43676d00, /* N */
/*   1.11152d00, -0.60045d00, 0.0d00, 0.0d00, 0.0d00, -0.44108d00,  O */
   1.6477d00,  45.0783d00, 0.0d00, 0.0d00, 0.0d00, -7.7907d00,   /* O (new) */
   1.12060d00, -0.98560d00, 0.0d00, 0.0d00, 0.0d00, -0.44625d00, /* F */
   1.12861d00, -1.55047d00, 0.0d00, 0.0d00, 0.0d00, -0.46631d00/; /* Ne */
   data (dpse(i), i = LDIM1P1, LDIM1PLDIM2) / 
   1.74854d00, -0.01388d00, 5*0.0d00, 1.46565d00, 0.15319d00,    /* Na */
   5*0.0d00, -2.83231d00,                                        /* Na */
   2.00073d00, -0.03023d00, 5*0.0d00, 1.40926d00, -0.00871d00,   /* Mg */
   5*0.0d00, -92.89133d00,                                       /* Mg */
   2.16121d00, -0.06021d00, 5*0.0d00, 1.40609d00, -0.02270d00,   /* Al */
   5*0.0d00, -0.93152d00,                                        /* Al */
   2.30683d00, -0.10463d00, 5*0.0d00, 1.61465d00, -0.04644d00,   /* Si */
   5*0.0d00, -0.18945d00,
   2.42266d00, -0.16784d00, 5*0.0d00, 1.72241d00, -0.08401d00,   /* P */
   5*0.0d00, -0.40202d00,                                        /* P */
   2.51686d00, -0.25672d00, 5*0.0d00, 1.79573d00, -0.13150d00,   /* S */
   5*0.0d00, -0.74309d00,                                        /* S */
   2.60459d00, -0.37281d00, 5*0.0d00, 1.85329d00, -0.20197d00,   /* Cl */
   5*0.0d00, -0.98109d00,                                        /* Cl */
   2.66818d00, -0.52659d00, 5*0.0d00, 1.90592d00, -0.29464d00,   /* Ar */
   5*0.0d00, -1.35035d00/;                                       /* Ar */
   data (dpse(i), i = LDIM1PLDIM2P1, DPSE_DIM) /
   135 * 0.0d00,       /* Ditto for K to Co */
   5.57207d00, -0.11685d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00,
   5.49578d00, 0.23560d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00,
   -6.10669d00,                                                   /* Ni */
   5.75316d00, -0.13096d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00,
   5.98399d00, 0.55456d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00, 0.0d00,
   -6.12527d00,                                                   /* Cu */
   15 * 0.0d00/;   /* Fill in for Zn */
   data dzu/ 
   1.04883d00, 1.04883d00, 1.40580d00, /* Li */
   0.25784d00, 0.25784d00, 0.96124d00, /* Be */
   0.40255d00, 0.40255d00, 1.91861d00, /* B */
   0.57656d00, 0.57656d00, 3.18301d00, /* C */
   0.77911d00, 0.77911d00, 4.76414d00, /* N */
/*   1.00639d00, 1.00639d00, 6.34314d00,  O */
   10.37387d00, 10.37387d00, 25.320084, /* O(new) */
   1.26132d00, 1.26132d00, 8.17605d00, /* F */
   1.53611d00, 1.53611d00, 10.74498d00, /* Ne */
   2*0.25753d00, 2*0.50138d00, 1.01908d00,                      /* Na */
   2*0.30666d00, 2*0.27481d00, 6.35656d00,                      /* Mg */
   2*34298d00, 2*0.28766d00, 0.85476d00,                        /* Al */
   0.39512d00, 0.39512d00, 0.40442d00, 0.40442d00, 0.25050d00,  /* Si */
   0.45424d00, 0.45424d00, 0.49582d00, 0.49582d00, 0.56256d00,  /* P */
   0.51644d00, 0.51644d00, 0.59819d00, 0.59819d00, 1.13649d00,  /* S */
   0.59299d00, 0.59299d00, 0.69783d00, 0.69783d00, 2.00000d00,  /* Cl */
   0.66212d00, 0.66212d00, 0.80903d00, 0.80903d00, 3.50000d00,  /* Ar */
   45 * 0.0d00,    /* Ditto for K to Co */
   0.63800d00, 0.638000d00, 0.70978d00, 0.70978d00, 2.44040d00, /* Ni */
   0.71270d00, 0.71270d00, 0.89496d00, 0.89498d00, 2.67294d00, /* Cu */
   5 * 0.0d00/;  /* Fill in Zn later */
   data nupse /        /* these are nu + 2 values */ 
   0, 4, 1, /* Li */
   0, 4, 1, /* Be */
   0, 4, 1, /* B */
   0, 4, 1, /* C */
   0, 4, 1, /* N */
/*   0, 4, 1,   O  */
   1, 2, 2, /* O (new) */
   0, 4, 1, /* F */
   0, 4, 1, /* Ne */
   0, 4, 0, 4, 1, /* Na */
   0, 4, 0, 4, 1, /* Mg */
   0, 4, 0, 4, 1, /* Al */
   0, 4, 0, 4, 1, /* Si */
   0, 4, 0, 4, 1, /* P */
   0, 4, 0, 4, 1, /* S */
   0, 4, 0, 4, 1, /* Cl */
   0, 4, 0, 4, 1, /* Ar */
   0, 4, 0, 4, 1, /* K */
   0, 4, 0, 4, 1, /* Ca */
   0, 4, 0, 4, 1, /* Sc */
   0, 4, 0, 4, 1, /* Ti */
   0, 4, 0, 4, 1, /* V */
   0, 4, 0, 4, 1, /* Cr */
   0, 4, 0, 4, 1, /* Mn */
   0, 4, 0, 4, 1, /* Fe */
   0, 4, 0, 4, 1, /* Co */
   0, 4, 0, 4, 1, /* Ni */
   0, 4, 0, 4, 1, /* Cu */
   0, 4, 0, 4, 1/;  /* Zn */







@r

@* PSEPOT. Function to do the actual work of pseudopotential
integral evaluation.
The function calculates matrix elements of atomic pseudo-
potential  Vps  centred on site  A  between two Gaussians centred
on sites  B  and  C  (all three sites may assume arbitrary positions
in space; any two of them or all three are allowed to
coincide).

The coding here is ``developed'' (read that ``mostly copied'') from
the FORTRAN 66 program described by M. Kolar (Comp. Phys. Communications {\bf 23},
275 (1980) whose program description is a model of clear information.
*/

@a

   double precision function psepot(nc,zc,ca,nb,zb,ba,
                                   zu,Td,nu,kmax,lmax);
   implicit double precision (a-h,o-z);
   integer nc(*), nb(*), nu(*), kmax,lmax;
   double precision zc, zb, ca(*), ba(*), zu(*), Td(*);
   {
   double precision r1,r11,r;   /* These three are entry points to |rinit|*/
   integer rinit,rl,rl1;    /* These three are the integer entry points to
                          the same routine: | rinit | */
@<psepot Declarations, commons and equivalences@>

@<Use capi to get the geometric factors@>

   tzcb=zc+zb;
   ncb=ncn+nbn;
   if ( logc && logb ) 

      {
@<Simple case, both distances zero@>
      }

    log = logc || logb;
    td1 = two*tca*zc;@~ td2 = two*tba*zb;@~  t2 = zc*zb;
    tg1 = t2*(tba-tca)**2;@~  tg2 = zb*tba2+zc*tca2;
    a(1) = td1+td2; 
    if ( log )

      {
@<Intermediate case, only one distance zero@>
      }

@<General case, both distances non-zero@>
   }

@ Here are the declaractions for work-space and intermediate storage.

@<psepot Declarations, commons and equivalences@> = 
   logical log,logc,logb,lgo,lgl(252),lgl1(233);
   double precision tpic(9,4,6),tpib(9,4,6),tpc(9),
            tpb(189),ttpp(189);
   double precision a(2);
   double precision zero, quarter, half, one, two;
   common /cocapi/lgo;
   common /in1/lc,lc1,lc2;
   common/c0/tzcb,td1,td2,tg1,tg2,tg3,a,ts,ncb,jj,imax,log;
   equivalence(tpc(1),tpic(1,1,1),ttpp(40)),(tpb(1),tpib(1,1,1),t0);
   data zero/0.0d00/,one/1.0d00/,two/2.0d00/;
   data quarter, half/0.25d00,0.5d00/;

@ Set up the geometrical factors with |capi|


@<Use capi to get the geometric factors@> = 
   lc = lmax+1;@~ lc1 = lc+1;@~ lc2 = lc*lc ;
   call capi(nc,ncn,ca,tca,tca2,lamx1,tpic,logc);
   if ( ! lgo ) return(zero);
   if ( logc ) 
      {
      for ( lm = 1; lm <= lc2; lm = lm+1)
         tpb(lm)=tpc(lm);
      call capi(nb,nbn,ba,tba,tba2,lamx1, tpic,logb);
      }
   else
      call capi(nb,nbn,ba,tba,tba2,la1mx1,tpib,logb);
   if ( ! lgo ) return(zero);

@ This code is used when both basis functions are on the same centre
as the core potential.


@<Simple case, both distances zero@> = 
/*  Both distances |tca| and |tcb| are zero */
      t0=t0*tpc(1);
      if ( lc > 1) 
         {
         lm2=1;
         for ( l = 2; l <= lc; l = l+1)
            {
            lm1=lm2+1;
            lm2=l*l;
            t2=zero;
            for ( lm = lm1; lm <= lm2; lm = lm +1)
               t2=t2+tpc(lm)*tpb(lm);
            tpb(l)=t2;
            }
         }
      t2=zero;
      for ( k = 1; k <= kmax; k = k+1)
         {
         t1=zero;
         for ( l = 1; l <= lc; l = l+1)
            t1=t1+tpb(l)*td((l-1)*kmax+k);
         if ( t1 == zero ) next;
         t2=t2+r11(zu(k),nu(k))*t1;
         }
      psepot=t2;
      return;

@ Only one of the basis functions is on a centre different from the core-potential
centre.


@<Intermediate case, only one distance zero@> = 
/*    One and only one of both distances |tca|, |tba| is nonzero,
      swap the parameters if it is the wrong one   */

      if ( ! logb )
         {
         n1=ncn;
         ncn=nbn;
         nbn=n1;
         }
      jj=1;
      imax=lamx1+ncn;
      nc1=ncn+1;
      i = 1;@~   ii=1;@~  iii=0;
      for ( la = 1; la <= lamx1; la = la+1)
         {
         l1=max0(1,la-ncn);
         for ( ka = 1; ka <= nc1; ka = ka+1)
            {
            lm2=(l1-1)**2;
            lgl(i)=.true.;
            irl=lc1-l1;
            for ( l = l1; l <= lc; l = l+1)
               {
               lm1=lm2+1;
               lm2=l*l;
               t1=zero;
               for ( lm = lm1; lm <= lm2; lm = lm+1)
                  t1=t1+tpb(lm)*tpic(lm,ka,la);
               lgl1(ii)=t1.eq.zero;
               if ( lgl1(ii) ) 
                  { ii =  ii+1;@~ next;}
               lgl(i)=.false.;
               iii=iii+1;
               ttpp(iii)=t1;
               ii=ii+1;
               }
            if(lgl(i)) ii=ii-irl;
            i=i+1;
            }
         }
      if ( iii == 0 ) return(zero);
      t0=zero;
      for ( k = 1; k <= kmax; k = k+1)
         {
         nu1=rinit(zu(k),nu(k))+nbn;
         i=1;@~   ii=1;@~  iii=0;
         for ( la = 1; la <= lamx1; la = la+1)
            {
            l1=max0(1,la-ncn);
            irl=rl1(la);
/*           irl=rl1(la,isilly);     */
            t1 = zero;
            for ( ka = 1; ka <= nc1; ka = ka+1)
               {
               if ( lgl(i) ) 
                  { i = i+1;@~ next;}
               t2=zero;
               for ( l = l1; l <= lc; l = l+1)
                   {
                   if ( lgl1(ii) ) 
                      { ii = ii+1;@~ next;}
                   iii=iii+1;
                   t2=t2+td((l-1)*kmax+k)*ttpp(iii);
                   ii=ii+1;
                   }
               if ( t2 == zero) 
                  { i = i + 1;@~ next;}
/*               t1=t1+t2*r1(nu1+ka,isilly);  */
               t1=t1+t2*r1(nu1+ka,la);
               i=i+1;
               }
            t0=t0+t1*irl;
            }
         }
      psepot=t0*half;
   return (psepot);

@ The general case, both basis functions are on centres which are different
from the core-potential centre.

@<General case, both distances non-zero@> = 
/*    Both the distances |tca| and |tcb| are not  zero  */

    tg3=t2*(tba+tca)**2;@~    t1=td1-td2;
   ts=dsign(one,t1);
   a(2)=ts*t1;
   imax=2*(ncb+lc)-1;@~ jj=2;@~  nmax=ncb+1;
   nc1=ncn+1;@~  i=1;@~  ii=1;@~  iii=0;
   for ( la = 1; la <= lamx1; la = la+1)
      {
      l2=max0(1,la-ncn);
      for ( la1 = 1; la1 <= la1mx1; la1 = la1+1)
         {
         l1=max0(l2,la1-nbn);
         irl=lc1-l1;
         for ( n = 1; n <= nmax; n = n+1)
            {
            n1=n+1;
            kamin=max0(1,n-nbn);
            kamax=min0(nc1,n);
            lgl(i)=.true.;
            lm2=(l1-1)**2;
            for ( l = l1; l <= lc; l = l+1)
               {
               lm1=lm2+1;@~  lm2=l*l;
               t1=zero;
               for ( lm = lm1; lm <= lm2; lm = lm+1)
                  {
                  for ( ka = kamin; ka <= kamax; ka = ka+1)
                     {
                     n1ka=n1-ka;
                     t1=t1+tpic(lm,ka,la)*tpib(lm,n1ka,la1);
                     }
                  }
               lgl1(ii)=t1.eq.zero;
               if(lgl1(ii)) 
                   { ii = ii + 1;@~ next;}
               lgl(i)=.false.;
               iii=iii+1;
               ttpp(iii)=t1;
               ii=ii+1;
               }
            if(lgl(i)) ii=ii-irl;
            i=i+1;
            }
         }
      }
   if ( iii == 0 ) 
      return (zero);
   for ( i = 1; i <= iii; i = i+1)
      tpb(i)=zero;
   for ( k = 1; k <= kmax; k = k+1)
      {
      nu1=rinit(zu(k),nu(k));
      i=1;@~  ii=1;@~  iii=0;
      for ( la = 1;la <= lamx1; la = la+1)
         {
         l2=max0(1,la-ncn);
         for ( la1 = 1; la1 <= la1mx1; la1 = la1+1)
            {
            l1=max0(l2,la1-nbn);
            irl=rl(la,la1);
            for ( n = 1; n <= nmax; n = n+1)
               {
               if ( lgl(i) ) 
                  { i = i + 1;@~ next;}
               t1=r(nu1+n)*irl;
               for ( l = l1; l <= lc; l = l+1)
                  {
                  if ( lgl1(ii) ) 
                     { ii = ii + 1; @~ next;}
                  iii=iii+1;
                  tpb(iii)=tpb(iii)+t1*td((l-1)*kmax+k);
                  ii=ii+1;
                  }
               i=i+1;
               }
            }
         }
      }
    t1 = zero;
      for ( i = 1; i <= iii; i = i+1)
         {
         t1=t1+ttpp(i)*tpb(i);
         }
   psepot=t1*quarter;
   return(psepot);


@* derf.  This is just the simplest polynomial taken from
Abramowitz and Stegun. It needs checking for accuracy.

@a

   double precision function derf(x);
   implicit double precision (a-h,o-z);
   double precision x;
   {
   data one/1.0d00/, p/0.3275911d00/;
   data a1,a2,a3,a4,a5/
      0.254829592,-0.284496736d00,1.421413741d00,
      -1.453152027d00,1.061405429d00/;
   xx = dabs(x);
   t = one/(one+p*xx);
   ee = dexp(-xx*xx);
   derf = one - (a1*t+a2*t*t+a3*t*t*t+a4*t*t*t*t+a5 
                    *t*t*t*t*t)*ee;
   return;
   }

